datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  ADMIN
}

enum CourseType {
  COURSE
  REVIEW
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  SECTION
  TRUE_FALSE
}

enum MediaType {
  VIDEO
  AUDIO
  TEXT
  IMAGE
  PDF
}

model User {
  id                 Int      @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String   @unique
  password           String
  role               Role     @default(STUDENT)
  isBlocked          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?
  profilePictureUrl  String?
  lastLogin          DateTime?
  lastUpdatedBy      Int?
  courseCompletionDate DateTime?
  certificates       Certificate[]
  purchases          LessonPurchase[]
  quizAttempts       QuizAttempt[]
  lessonsQuizAttempts LessonQuizAttempt[]
  // auth
  resetPasswordToken  String?  @unique
  resetPasswordExpires DateTime?
  confirmationToken String?  @unique
  confirmationExpires DateTime?
  emailConfirmed     Boolean  @default(false)
  // Relation Fields
  favorites          Favorite[]
  pinedLessons       PinnedLesson[]
  completedCourses   CompletedCourse[]
  studentCourses     StudentCourse[]
  answers            Answer[]
  // Add indexes to improve query performance
  @@index([email])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
  quizzes         Quiz[]
  // Add indexes to improve query performance
  @@index([name])
}

model Course {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      Int
  type            CourseType @default(COURSE)  // Add the type field
  lessons         Lesson[]
  quizzes         Quiz[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  certificates    Certificate[]
  published       Boolean  @default(false)
  image           String?
  // Relation Fields
  students        StudentCourse[]
  completedBy     CompletedCourse[]
  favoritedBy     Favorite[]
  // Add indexes to improve query performance
  @@index([title])
}

model Lesson {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  course          Course   @relation(fields: [courseId], references: [id])
  courseId        Int
  media           Media[]
  image           String?
  quiz              String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  purchases       LessonPurchase[]
  price       Float @default(0)
  published       Boolean  @default(false)
  order           Int

  // Relation Fields
  pinnedBy        PinnedLesson[]
  certificates    Certificate[]
  quizAttempts LessonQuizAttempt[]
  // Add indexes to improve query performance
  @@index([title])
}

model LessonQuizAttempt {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  lesson          Lesson   @relation(fields: [lessonId], references: [id])
  lessonId        Int
  pdfAnswer       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Media {
  id              Int      @id @default(autoincrement())
  title           String?
  description     String?
  link            String
  type            MediaType
  isFree          Boolean
  expectedDuration Int?
  order           Int
  lesson          Lesson   @relation(fields: [lessonId], references: [id])
  lessonId        Int
}

model Certificate {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  link            String
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  course          Course?  @relation(fields: [courseId], references: [id])
  courseId        Int?
  lesson          Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId        Int?
  createdAt       DateTime @default(now())
}

model Quiz {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  course          Course?  @relation(fields: [courseId], references: [id])
  courseId        Int?
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  questions       Question[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  timeLimit       Int?     // Optional time limit for the quiz in minutes
  passingScore    Int?
  attempts        QuizAttempt[]
}

model Question {
  id              Int      @id @default(autoincrement())
  title           String
  description           String?
  questionType    QuestionType
  questionText    String?
  questionTextBestAnswer String?
  questionChoices Choice[] // If it's a standalone question, these are the choices
  correctAnswerBoolean    Boolean? // Used for TRUE_FALSE questions
  quiz            Quiz     @relation(fields: [quizId], references: [id])
  quizId          Int
  order           Int?
  answers         Answer[]
  sectionQuestions SectionQuestion[] // The questions inside a section (if applicable)
  createdAt       DateTime @default(now())
}

model SectionQuestion {
  id              Int      @id @default(autoincrement())
  title           String   // Title of the question inside the section
  questionChoices Choice[] // Multiple choice options
  parentQuestion  Question  @relation(fields: [parentQuestionId], references: [id])
  parentQuestionId Int  // Relation to the parent question (which is a section)
  order           Int?
  createdAt       DateTime @default(now())
  answers         Answer[] // To store user's answers for section questions
}
model Choice {
  id              Int      @id @default(autoincrement())
  title           String
  correct         Boolean  // Whether this choice is the correct answer
  question        Question? @relation(fields: [questionId], references: [id])
  questionId      Int?
  sectionQuestion SectionQuestion? @relation(fields: [sectionQuestionId], references: [id])
  sectionQuestionId Int?
}
model Answer {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  question       Question?  @relation(fields: [questionId], references: [id])
  questionId     Int?
  sectionQuestion SectionQuestion? @relation(fields: [sectionQuestionId], references: [id])
  sectionQuestionId Int?
  quizAttempt    QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  quizAttemptId  Int
  answer         String     // This can store the student's answer, regardless of type
  isCorrect      Boolean?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model QuizAttempt {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  quiz            Quiz     @relation(fields: [quizId], references: [id])
  quizId          Int
  answers         Answer[] // Change from Json to an array of Answer model
  score           Int?
  completed       Boolean  @default(false)
  stoppedOn       Int?
  isApproved      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  attemptCount    Int      @default(0) // Number of times the user attempted the quiz
  duration        Int?     // Total duration taken by the user to complete the quiz in minutes
}
model LessonPurchase {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  lesson          Lesson   @relation(fields: [lessonId], references: [id])
  lessonId        Int
  status  PurchaseStatus @default(PENDING)  // Add status field
  purchasedAt     DateTime @default(now())
}

model Favorite {
  userId  Int
  courseId Int
  user    User   @relation(fields: [userId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
  @@id([userId, courseId])
}

model PinnedLesson {
  userId  Int
  lessonId Int
  user    User   @relation(fields: [userId], references: [id])
  lesson  Lesson @relation(fields: [lessonId], references: [id])
  @@id([userId, lessonId])
}

model CompletedCourse {
  userId  Int
  courseId Int
  user    User   @relation(fields: [userId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
  @@id([userId, courseId])
}

model StudentCourse {
  userId  Int
  courseId Int
  user    User   @relation(fields: [userId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
  @@id([userId, courseId])
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
}